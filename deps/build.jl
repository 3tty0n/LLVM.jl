# entry point for Pkg: performs all necessary build-time tasks, and writes ext.jl

include("compile.jl")

const ext = joinpath(@__DIR__, "ext.jl")
const ext_bak = ext * ".bak"

function main()
    debug("Performing package build for LLVM.jl from $(pwd())")
    ispath(ext) && mv(ext, ext_bak; remove_destination=true)
    ext_db = Dict{Symbol,Any}()


    ## gather info

    llvms = discover_llvm()
    wrappers = discover_wrappers()
    julia = discover_julia()

    llvm = select_llvm(llvms, wrappers)
    ext_db[:libllvm_version] = llvm.version
    ext_db[:libllvm_path]    = llvm.path
    ext_db[:libllvm_mtime]   = llvm.mtime
    ext_db[:libllvm_mtime]   = llvm.mtime
    ext_db[:libllvm_system]  = use_system_llvm

    llvm_targets = Symbol.(split(readstring(`$(get(llvm.config)) --targets-built`)))
    ext_db[:libllvm_targets] = llvm_targets

    wrapper = select_wrapper(llvm, wrappers)
    ext_db[:llvmjl_wrapper]  = wrapper

    package_commit =
        try
            cd(joinpath(@__DIR__, "..")) do
                chomp(readstring(`git rev-parse HEAD`))
            end
        catch
            warning("could not get LLVM.jl commit")
            # NOTE: we don't explicitly check for commit==nothing, because
            #       it will imply that dirty=true, making us rebuild anyway
            nothing
        end
    ext_db[:package_commit] = package_commit

    package_dirty =
        try
            cd(joinpath(@__DIR__, "..")) do
                length(chomp(readstring(`git diff --shortstat`))) > 0
            end
        catch
            warning("could not get LLVM.jl git status")
            true
        end


    ## build extras library

    ext_db[:libllvm_extra_path] = extras_path
    if !isfile(extras_path) || package_dirty
        compile_extras(llvm, julia)
    end


    ## (re)generate ext.jl

    if isfile(ext_bak)
        debug("Checking validity of existing ext.jl...")
        @eval module Previous; include($ext_bak); end
        function globals(mod)
            all_names = names(mod, true)
            filter(name-> !any(name .== [module_name(mod), Symbol("#eval"), :eval]), all_names)
        end
        ext_bak_db = Dict{Symbol,Any}(name => getfield(Previous, name)
                                      for name in globals(Previous))

        if ext_db == ext_bak_db
            info("LLVM.jl has already been built for this toolchain, no need to rebuild")
            mv(ext_bak, ext)
            return
        end
    end

    open(ext, "w") do fh
        write(fh, "# autogenerated file with properties of the toolchain\n")
        for (key,val) in ext_db
            write(fh, "const $key = $(repr(val))\n")
        end
    end

    # refresh the compile cache
    # NOTE: we need to do this manually, as the package will load & precompile after
    #       not having loaded a nonexistent ext.jl in the case of a failed build,
    #       causing it not to precompile after a subsequent successful build.
    Base.compilecache("LLVM")

    return
end

main()
