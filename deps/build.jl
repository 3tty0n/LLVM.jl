# entry point for Pkg: performs all necessary build-time tasks, and writes ext.jl

include("compile.jl")

const ext = joinpath(@__DIR__, "ext.jl")
try
    libllvms = discover_llvm()
    llvmjl_wrappers = discover_wrappers()
    julia = discover_julia()

    libllvm = select_llvm(libllvms, llvmjl_wrappers)
    llvmjl_wrapper = select_wrapper(libllvm, llvmjl_wrappers)


    #
    # Detect changes
    #

    # gather libLLVM information
    libllvm_targets = Symbol.(split(readstring(`$(get(libllvm.config)) --targets-built`)))

    # gather LLVM.jl information
    llvmjl_hash =
        try
            cd(joinpath(@__DIR__, "..")) do
                chomp(readstring(`git rev-parse HEAD`))
            end
        catch e
            warning("could not find package git hash")
            # NOTE: we don't explicitly check for llvmjl_hash==nothing, because
            #       it will imply that llvmjl_dirty=true, making us rebuild anyway
            nothing
        end
    llvmjl_dirty =
        try
            cd(joinpath(@__DIR__, "..")) do
                length(chomp(readstring(`git diff --shortstat`))) > 0
            end
        catch e
            warning("could not find package git status")
            true
        end

    # check if anything has changed (to prevent unnecessary recompilation)
    if llvmjl_dirty
        debug("Package is dirty, rebuilding")
    elseif isfile(ext)
        debug("Checking validity of existing ext.jl...")
        @eval module Previous; include($ext); end
        if  isdefined(Previous, :libllvm_version) && Previous.libllvm_version == libllvm.version &&
            isdefined(Previous, :libllvm_path)    && Previous.libllvm_path == libllvm.path &&
            isdefined(Previous, :libllvm_mtime)   && Previous.libllvm_mtime == libllvm.mtime &&
            isdefined(Previous, :libllvm_targets) && Previous.libllvm_targets == libllvm_targets &&
            isdefined(Previous, :llvmjl_wrapper)  && Previous.llvmjl_wrapper == llvmjl_wrapper &&
            isdefined(Previous, :llvmjl_hash)     && Previous.llvmjl_hash == llvmjl_hash
            info("LLVM.jl has already been built for this toolchain, no need to rebuild")
            return
        end
    end


    #
    # Acquire extras library
    #

    # TODO: download from buildbot if !llvmjl_dirty

    libllvm_extra_path = compile_extras(libllvm, julia)


    #
    # Finishing up
    #

    # write ext.jl
    open(ext, "w") do fh
        write(fh, """
            # autogenerated file with properties of the toolchain

            # LLVM library properties
            const libllvm_version = v"$(libllvm.version)"
            const libllvm_path = "$(libllvm.path)"
            const libllvm_mtime = $(libllvm.mtime)
            const libllvm_system = $use_system_llvm
            const libllvm_targets = $libllvm_targets

            # LLVM extras library properties
            const libllvm_extra_path = "$libllvm_extra_path"

            # package properties
            const llvmjl_wrapper = "$llvmjl_wrapper"
            const llvmjl_hash = "$llvmjl_hash"
            """)
    end
catch ex
    # if anything goes wrong, wipe the existing ext.jl to prevent the package from loading
    rm(ext; force=true)
    rethrow(ex)
end
